/*
 * File: app/controller/UpdateActions.js
 * Date: Sun Mar 08 2015 15:46:56 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PayrollApp.controller.UpdateActions', {
    extend: 'Ext.app.Controller',
    alias: 'controller.updateactions',

    models: [
        'BlankPayments'
    ],
    stores: [
        'BlankPaymentsStore'
    ],
    views: [
        'PayTypesForm',
        'PayRatesForm',
        'Banks',
        'JobGroups',
        'JobTitles',
        'Departments',
        'PayrollBranches',
        'PostByCode',
        'PayrollBatchUpdate'
    ],

    refs: [
        {
            ref: 'paytypesform',
            selector: 'paytypesform',
            xtype: 'paytypesform'
        },
        {
            ref: 'payratesform',
            selector: 'payratesform',
            xtype: 'payratesform'
        },
        {
            ref: 'banks',
            selector: 'banks',
            xtype: 'banks'
        },
        {
            ref: 'jobtitles',
            selector: 'jobtitles',
            xtype: 'jobtitles'
        },
        {
            ref: 'jobgroups',
            selector: 'jobgroups',
            xtype: 'jobgroups'
        },
        {
            ref: 'departmentsform',
            selector: 'departmentsform',
            xtype: 'departmentsform'
        },
        {
            ref: 'payrollbranches',
            selector: 'payrollbranches',
            xtype: 'payrollbranches'
        },
        {
            ref: 'postbycode',
            selector: 'postbycode',
            xtype: 'postbycode'
        },
        {
            ref: 'payrollbatchupdate',
            selector: 'payrollbatchupdate',
            xtype: 'payrollbatchupdate'
        }
    ],

    init: function(application) {
        this.control({
            '#cmdSavePaytypes':{
                click:this.savePayTypes
            },
            '#cmdSaveRates':{
                click:this.saveRates
            },
            '#cmdSaveTitles':{
                click:this.saveTitles
            },
            '#cmdSaveGroups':{
                click:this.saveGroups
            },
            '#cmdSaveBanks':{
                click:this.saveBanks
            },
            '#cmdSaveDepartments':{
                click:this.saveDepartments
            },
            '#cmdSaveBranches':{
                click:this.saveBranches
            },
            '#cmdSaveBankBranches':{
                click:this.saveBankBranches
            },
            '#cmdSavePaymentsPosting':{
                click:this.savePayTypePayments
            },
            '#cmdBatchPost':{
                click:this.processBatches
            }
        });
    },

    savePayTypes: function(button) {
        var form = button.up('form').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_paytypes',
                    fieldParam:'PayType',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                    // win.removeAll();
                    //win.close();

                    var paytypes=Ext.data.StoreManager.lookup('PayTypeStore');
                    paytypes.load({});

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveRates: function(button) {
        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_rates',
                    fieldParam:'RateName',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                   // win.removeAll();
                    //win.close();

                    var payrates=Ext.data.StoreManager.lookup('PayRatesStore');
                    payrates.load({});

                },
                failure: function(form, action) {
                    if(action.result.errNo==1){
                        Ext.Msg.alert('Error','Sorry Item already Exists');
                    }else{
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                    }

                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveTitles: function(button) {
        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_jobtitles',
                    fieldParam:'JobTitle',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                   // win.removeAll();
                    //win.close();

                    var jobtitles=Ext.data.StoreManager.lookup('JobTitlesStore');
                    jobtitles.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveGroups: function(button) {
        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_jobgroups',
                    fieldParam:'groupID',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                   // win.removeAll();
                    //win.close();

                    var jobgroups=Ext.data.StoreManager.lookup('JobGroupStore');
                    jobgroups.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveBanks: function(button) {
        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_banks',
                    fieldParam:'BankCode',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                   // win.removeAll();
                    //win.close();

                    var jobtitles=Ext.data.StoreManager.lookup('JobTitlesStore');
                    jobtitles.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveDepartments: function(button) {

        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_departments',
                    fieldParam:'deptName',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                   // win.removeAll();
                    //win.close();

                    var jobtitles=Ext.data.StoreManager.lookup('JobTitlesStore');
                    jobtitles.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveBranches: function(button) {
        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_paybranch',
                    fieldParam:'branchName',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    var paybranches=Ext.data.StoreManager.lookup('PayBranchStore');
                    paybranches.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    saveBankBranches: function(button) {
        var form = button.up('form').getForm(); // get the basic form

            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    tableName:'proll_bankbranches',
                    fieldParam:'BankBranch',
                    fieldValue:'ID'
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    //var win = button.up('window');
                   // win.removeAll();
                    //win.close();

                    var bBranchesStore=Ext.data.StoreManager.lookup('BankBrancheStore');
                    bBranchesStore.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating Items please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }



    },

    savePayTypePayments: function(button) {
        var store=Ext.data.StoreManager.lookup('BlankPaymentStore');

        var strStore=this.getPostbycode().down('#postByCodeGrid').getStore();
        var paytype=this.getPostbycode().down('#txtPayTypeID').getValue();
        var CatID=this.getPostbycode().down('#txtPayCatId').getValue();

        if(paytype===''){
            Ext.Msg.alert('Error','Please select a Pay Type');
        }else{
            strStore.proxy.extraParams = { paytype: paytype,CatID:CatID };
            strStore.sync({
                success: function()
                {
                    Ext.Msg.alert('Success','Successfully Save the Records');
                },
                failure: function()
                {
                    Ext.Msg.alert('Failure','Failed to Save the Records, Please check your values');
                },
                callback: function()
                {
                    console.log("calling callback");
                },
                scope: this

            });
        }


    },

    processBatches: function(button) {
        var payType=this.getPayrollbatchupdate().down('#txtSelectedPaytype').getValue();

        if(!payType){
            Ext.Msg.alert('Error','Please Select a Paytype');
        }else{
             //Ext.Msg.alert('Information','The Selected Paytype is '+payType);

            switch(payType){
                case '110':
                    this.postGratuity(payType);
                    break;
                case '014':
                    this.postPension(payType);
                    break;
                default:
                    this.postOtherPayments(payType);
            }

        }


    },

    /*
        Post Gratuity for All Employees

    */
    postGratuity: function(paytype) {
                var gratuityPostingWindow=Ext.create('Ext.window.Window', {
                    title: 'Payroll Gratuity Batch Posting',
                    resizable:false,
                    animCollapse: true,
                    collapsible: true,
                    tools: [
                    {
                        xtype: 'tool',
                        type: 'minimize'
                    },
                    {
                        xtype: 'tool',
                        type: 'maximize'
                    }
                    ]
                });

        gratuityPostingWindow.show();
    },

    postPension: function(payType) {
                var gratuityPostingWindow=Ext.create('Ext.window.Window', {
                    title: 'Payroll Gratuity Batch Posting',
                    resizable:false,
                    animCollapse: true,
                    collapsible: true,
                    tools: [
                    {
                        xtype: 'tool',
                        type: 'minimize'
                    },
                    {
                        xtype: 'tool',
                        type: 'maximize'
                    }
                    ]
                });
    }

});
