/*
 * File: app/controller/ReportsActions.js
 * Date: Tue Aug 25 2015 11:46:48 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PayrollApp.controller.ReportsActions', {
    extend: 'Ext.app.Controller',
    alias: 'controller.reportsactions',

    views: [
        'TrialBalanceWindow',
        'PayrollMain',
        'DepartmentalTotalsWindow',
        'PayrollPostingWindow',
        'EarningsDeductionsWindow',
        'EarningsGrid',
        'PayrollListingWindow',
        'NhifReturns',
        'PayeReturns',
        'NssfReturns',
        'P9ReportWindow',
        'P9Report',
        'PayrollListingsMain',
        'PayrollListingGrid',
        'PayrollPostingGrid'
    ],

    refs: [
        {
            ref: 'payrollpostingwindow',
            selector: 'payrollpostingwindow',
            xtype: 'payrollpostingwindow'
        },
        {
            ref: 'trialbalancewindow',
            selector: 'trialbalancewindow',
            xtype: 'trialbalancewindow'
        },
        {
            ref: 'viewport',
            selector: 'payrollmain',
            xtype: 'payrollmain'
        },
        {
            ref: 'departmentaltotalswindow',
            selector: 'departmentaltotalswindow',
            xtype: 'departmentaltotalswindow'
        },
        {
            ref: 'earningsdeductionswindow',
            selector: 'earningsdeductionswindow',
            xtype: 'earningsdeductionswindow'
        },
        {
            ref: 'earningsgrid',
            selector: 'earningsgrid',
            xtype: 'earningsgrid'
        },
        {
            ref: 'payrolllistingwindow',
            selector: 'payrolllistingwindow',
            xtype: 'payrolllistingwindow'
        },
        {
            ref: 'nhifreturns',
            selector: 'nhifreturns',
            xtype: 'nhifreturns'
        },
        {
            ref: 'nssfreturns',
            selector: 'nssfreturns',
            xtype: 'nssfreturns'
        },
        {
            ref: 'payereturns',
            selector: 'payereturns',
            xtype: 'payereturns'
        },
        {
            ref: 'p9report',
            selector: 'p9report',
            xtype: 'p9report'
        },
        {
            ref: 'p9reportwindow',
            selector: 'p9reportwindow',
            xtype: 'p9reportwindow'
        },
        {
            ref: 'payrolllistingsmain',
            selector: 'payrolllistingsmain',
            xtype: 'payrolllistingsmain'
        },
        {
            ref: 'payrolllistinggrid',
            selector: 'payrolllistinggrid',
            xtype: 'payrolllistinggrid'
        },
        {
            ref: 'payrollpostinggrid',
            selector: 'payrollpostinggrid',
            xtype: 'payrollpostinggrid'
        }
    ],

    init: function(application) {
        this.control({
            '#cmdPreviewPostings':{
                click:this.previewPostings
            },
            '#mnuDepartmentTotals':{
                click:this.openDepartmentReports
            },
            '#cmdPreviewdeptReport':{
                click:this.previewDepartmentsReport
            },
            '#mnuEarnings':{
                click:this.openEarningsDeductionsWin
            },
            '#mnuDeductions':{
                click:this.openEarningsDeductionsWin
            },
            '#cmdPreviewEarnDead':{
                click:this.previewEarningsDeductions
            },
            '#cmdExportEarnings':{
                click:this.exportEarnings
            },
            '#cmdExportListing':{
                click:this.exportListing
            },
            '#cmdPreviewListing':{
                click:this.previewListing
            },
            '#cmdExportNhif':{
                click:this.exportNhif
            },
            '#cmdExportNssf':{
                click:this.exportNssf
            },
            '#cmdExportPaye':{
                click:this.exportPaye
            },
            '#mnuP9Report':{
                click:this.openP9ReportWindow
            },
            '#cmdPreviewP9':{
                click:this.previewP9
            },
            '#cmdPrintP9':{
                click:this.printP9form
            },
            '#cmdExportListingsMain':{
                click:this.exportListingsMain
            },
            '#cmdExportPostings':{
                click:this.exportPayrollPostings
            }
        });
    },

    previewPostings: function(button) {

        //Ext.Msg.alert(this.getPayslipswin().down("#payslipMonth").getValue());

        postingsGrid = Ext.create('PayrollApp.view.PayrollPostingGrid', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        var pmonth=this.getPayrollpostingwindow().down('#payMonth').getValue();
        var branch=this.getPayrollpostingwindow().down('#empBranch').getValue();
        var catID=this.getPayrollpostingwindow().down('#CatID').getValue();
        var payType=this.getPayrollpostingwindow().down('#PaymentType').getValue();


        var postingStore=Ext.data.StoreManager.lookup("PayrollPostingStore");

        postingStore.load({
            params: {
                payMonth:pmonth,
                empBranch:branch,
                Payment:catID,
                PaymentType:payType
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        center_container.add(postingsGrid);

    },

    openDepartmentReports: function() {
        deptReports= Ext.create('PayrollApp.view.DepartmentalTotalsWindow', {});
        var deptsWin=Ext.create('Ext.window.Window', {
            title: 'Payroll Departmental Totals',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        deptsWin.add(deptReports);
        deptsWin.show();
    },

    previewDepartmentsReport: function(button) {

        //Ext.Msg.alert(this.getPayslipswin().down("#payslipMonth").getValue());

        reportswindow = Ext.create('PayrollApp.view.ReportsMainView', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        var pmonth=this.getDepartmentaltotalswindow().down('#tpayMonth').getValue();
        var deptName=this.getDepartmentaltotalswindow().down('#deptName').getValue();

        var departmentsStore=Ext.data.StoreManager.lookup("DepartmentsStore");

        departmentsStore.load({
            params: {
                payMonth:pmonth,
                deptName:deptName
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });

        var creditSum=0;
        var debitSum=0;
        departmentsStore.each(function (rec) {
            creditSum += rec.get('Credit');
            debitSum +=rec.get('Debit');
        });

        console.info(debitSum);

        center_container.add(reportswindow);

        var company;
        var Params=Ext.urlDecode(window.location.search.substring(1));

        var User2=Ext.data.StoreManager.lookup('DefaultItemsStore');
        User2.load({
          params: {
                userName: Params.user
            },
            callback: function(records, operation, success) {
               //company="records[1].data.CompanyName";
            },
            scope: this

        });


        User2.each(function (rec) {
           company = rec.get('CompanyName');
            //debitSum +=rec.get('Debit');
        });


        //var company=company;


        var data1=departmentsStore.proxy.reader.rawData;


        var d = new Date();
        var n = d.getFullYear();
        var period=pmonth +" "+ n;

        var tpl=new Ext.XTemplate(
        '<Table id=trialBalance>',
        '<tr><td colspan=4 class=titles>{[this.getCompanyName() ]}</td></tr>',
        '<tr><td colspan=4 class=titles>FINAL POSTINGS SUMMARY</td></tr>',
        '<tr><td colspan=4 class=titles>Department : {[this.getDepartment() ]}</td></tr>',
        '<tr><td colspan=4 class=titles>For the Period : {[this.getPeriod() ]}</td></tr>',
        '<tr><th>Pay Code</th><th>Pay Type</th><th>Debit</th><th>Credit</th></tr>',
        '<tpl for="trialbalance">',
        '<tr>',
        '<td>{PayCode}</td>',
        '<td>{Pay_Type}</td>',
        '<td>{Debit}</td>',
        '<td>{Credit}</td>',
        '</tpl>',
        '<tr><td colspan=2 class=totals>Totals</td><td class=totals> {[this.getDebitTotal() ]}</td><td class=totals> {[ this.getCreditTotal() ]}</td></tr>',
        '</table>',
        {
            getCompanyName:function(){
                return company;
            },
            getDepartment:function(){
                return deptName;
            },
            getPeriod:function(){
                return period;
            },
            getDebitTotal:function(){
                return debitSum.toFixed(2);
            },
            getCreditTotal:function(){
                return creditSum.toFixed(2);
            }
        }
        );

        tpl.overwrite(reportswindow.body,data1);

    },

    openEarningsDeductionsWin: function() {
        earnded= Ext.create('PayrollApp.view.EarningsDeductionsWindow', {});
        var earndedWin=Ext.create('Ext.window.Window', {
            title: 'Payroll Earnings and Deductions',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        earndedWin.add(earnded);
        earndedWin.show();
    },

    previewEarningsDeductions: function(button) {

        //Ext.Msg.alert("Test Test");
        earningsGrid = Ext.create('PayrollApp.view.EarningsGrid', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        var pmonth=this.getEarningsdeductionswindow().down('#payMonth').getValue();
        var payType=this.getEarningsdeductionswindow().down('#payType').getValue();


        var earningStore=Ext.data.StoreManager.lookup("EarningStore");

        earningStore.load({
            params: {
                payMonth:pmonth,
                PaymentType:payType
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        center_container.add(earningsGrid);

    },

    exportEarnings: function(button) {

        var payMonth=this.getEarningsdeductionswindow().down("#payMonth").getValue();
        var payType=this.getEarningsdeductionswindow().down("#payType").getValue();

        //Ext.Msg.alert("Test","Value is "+payType);

        window.open('reports/exportEarnings.php?payMonth='+payMonth+'&payType='+payType,"Earnings and Deductions","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    },

    exportListing: function(button) {
        //Ext.Msg.alert("Test","This is a test");


        var payMonth=this.getPayrolllistingwindow().down("#payMonth").getValue();
        var empBranch=this.getPayrolllistingwindow().down("#empBranch").getValue();


        if(empBranch==='CCC'){
            window.open('reports/exportListing.php?payMonth='+payMonth+'&empBranch='+empBranch,"payroll Listing CCC","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            window.open('reports/exportListingMain.php?payMonth='+payMonth+'&empBranch='+empBranch,"payroll Listing Main","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }
    },

    previewListing: function(button) {
        //alert('test');
        empBranch=this.getPayrolllistingwindow().down('#empBranch').getValue();
        payMonth=this.getPayrolllistingwindow().down('#payMonth').getValue();


                listingMainGrid = Ext.create('PayrollApp.view.PayrollListingsMain', {});
                center_container = this.getViewport().down('container[region=center]');
                center_container.removeAll();

                center_container.add(listingMainGrid);

                var listingMainStore=Ext.data.StoreManager.lookup("PayrollListingsMainStore");

                listingMainStore.load({
                    params: {
                        payMonth:payMonth,
                        empBranch:empBranch
                    },
                    callback: function(records, operation, success) {

                    },
                    scope: this
                });

            this.getPayrolllistingsmain().down('#payrollBranch').setValue(empBranch);
            this.getPayrolllistingsmain().down('#payrollMonth').setValue(payMonth);


    },

    exportNhif: function(button) {
        var payMonth=this.getNhifreturns().down("#nhifMonth").getValue();

        //Ext.Msg.alert("Test","Value is "+payMonth);

        window.open('reports/exportNHIF.php?payMonth='+payMonth,"NHIF Returns","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    },

    exportNssf: function(button) {
        var payMonth=this.getNssfreturns().down("#nssfMonth").getValue();

        //Ext.Msg.alert("Test","Value is "+payType);

        window.open('reports/exportNSSF.php?payMonth='+payMonth,"NSSF Returns","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    },

    exportPaye: function(button) {
        var payMonth=this.getPayereturns().down("#payeeMonth").getValue();

        //Ext.Msg.alert("Test","Value is "+payMonth);

        window.open('reports/exportPaye.php?payMonth='+payMonth,"PAYE Returns","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    },

    openP9ReportWindow: function() {
        p9report= Ext.create('PayrollApp.view.P9ReportWindow', {});
        var p9reportwin=Ext.create('Ext.window.Window', {
            title: 'Payroll P9 Report',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        p9reportwin.add(p9report);
        p9reportwin.show();
    },

    previewP9: function(button) {

        //Ext.Msg.alert("Test Test");

        p9Grid = Ext.create('PayrollApp.view.P9Report', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();


        var pid=this.getP9reportwindow().down('#pid').getValue();


        var p9Store=Ext.data.StoreManager.lookup("P9ReportStore");

        p9Store.load({
            params: {
                pid:pid
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        center_container.add(p9Grid);

    },

    printP9form: function(button) {
        //Ext.Msg.alert("Test","This is a test");


        var pid=this.getP9reportwindow().down("#pid").getValue();

        //Ext.Msg.alert("Test","Value is "+payType);

        window.open('reports/p9ReportPdf.php?pid='+pid,"payroll P9 Report","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    },

    exportListingsMain: function(button) {
        var payMonth=this.getPayrolllistingsmain().down("#payrollMonth").getValue();
        var payBranch=this.getPayrolllistingsmain().down("#payrollBranch").getValue();


        //Ext.Msg.alert("Test","Value is "+payMonth);

        window.open('reports/exportListingMain.php?payMonth='+payMonth+'&payBranch='+payBranch,"Pyaroll Listimgs Main","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    },

    exportPayrollPostings: function(button) {
        var payMonth=this.getPayrollpostingwindow().down("#payMonth").getValue();
        var payBranch=this.getPayrollpostingwindow().down("#empBranch").getValue();
        var catID=this.getPayrollpostingwindow().down("#CatID").getValue();
        var PaymentType=this.getPayrollpostingwindow().down("#PaymentType").getValue();


        //Ext.Msg.alert("Test","Value is "+payMonth);

        window.open('reports/exportPayrollPostings.php?payMonth='+payMonth+'&payBranch='+payBranch+'&catID='+catID+'&PaymentType='+PaymentType,"Pyaroll Postings","menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,\n\
        scrollbars=yes,status=yes");
    }

});
