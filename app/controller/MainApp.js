/*
 * File: app/controller/MainApp.js
 * Date: Fri Aug 28 2015 07:18:45 GMT+0300 (E. Africa Standard Time)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PayrollApp.controller.MainApp', {
    extend: 'Ext.app.Controller',

    models: [
        'EmployeesRegister',
        'DeptBranch',
        'PayDepartments',
        'JobTitles',
        'JobGroups',
        'MaritalStatus',
        'PayTypes',
        'PayRates',
        'EmployeesList',
        'EmpPayments',
        'EmploymentType',
        'Banks',
        'BankBranches',
        'ProllPayments',
        'CompanyInfo',
        'PayrollMonths',
        'SlipEmpInfo',
        'NHIFReturns',
        'PayeReturns',
        'NssfReturns',
        'PayrollPostings',
        'TrialBalance',
        'Earnings',
        'Deductions',
        'DefaultItems',
        'PayrollListings',
        'UsersList',
        'UserRoles',
        'PayCategory',
        'BlankPayments',
        'PayrollStatus',
        'EmployeesBatchList',
        'GratuityRates',
        'SaccoContributions',
        'WelfareContributions'
    ],
    stores: [
        'EmpRegisterStore',
        'PayBranchStore',
        'PayDeptStore',
        'JobTitlesStore',
        'JobGroupStore',
        'MaritalStatusStore',
        'PayTypeStore',
        'PayRatesStore',
        'EmployeeListStore',
        'EmpTypesStore',
        'EmpPaymentStore',
        'BankStore',
        'BankBrancheStore',
        'CompanyInfoStore',
        'PaymentsSummaryStore',
        'ProllPaymentsStore',
        'PayMonthStore',
        'NhifReturnsStore',
        'NssfReturnsStore',
        'PayeReturnsStore',
        'PayrollPostingStore',
        'SlipEmpInfoStore',
        'TrialBalanceStore',
        'DefaultItemsStore',
        'PayrollListingsStore',
        'UsersListStore',
        'UserRolesStore',
        'DepartmentsStore',
        'EarningStore',
        'PayCategoryStore',
        'BlankPaymentsStore',
        'PayrollStatusStore',
        'EmployeesBatchListStore',
        'GratuityRatesStore',
        'SaccoContributionStore',
        'WelfareStore'
    ],
    views: [
        'EmployeeRegister',
        'PayrollMain',
        'RegisterForm',
        'RegisterWindow',
        'CompanySettings',
        'Departments',
        'PayTypesForm',
        'PayRatesForm',
        'Banks',
        'JobTitles',
        'JobGroups',
        'EmpPayments',
        'NewPaymentsForm',
        'ProcessPayroll',
        'PostPayroll',
        'PayslipsWin',
        'ReportsMainView',
        'BankPayments',
        'NhifReturns',
        'NssfReturns',
        'PayeReturns',
        'TrialBalanceWindow',
        'PayrollPostingWindow',
        'PayrollPostingGrid',
        'PayrollListingGrid',
        'UserManagement',
        'NewUserForm',
        'PayrollBranches',
        'BankBranches',
        'PostByCode',
        'PayrollListingsMain',
        'PayrollBatchUpdate',
        'WelfareSavings',
        'SaccoReport',
        'SaccoWelfare'
    ],

    refs: [
        {
            ref: 'employeeregister',
            selector: 'employeeregister',
            xtype: 'employeeregister'
        },
        {
            ref: 'viewport',
            selector: 'payrollmain',
            xtype: 'payrollmain'
        },
        {
            ref: 'companysettings',
            selector: 'companysettings',
            xtype: 'companysettings'
        },
        {
            ref: 'departmentsform',
            selector: 'departmentsform',
            xtype: 'departmentsform'
        },
        {
            ref: 'paytypesform',
            selector: 'paytypesform',
            xtype: 'paytypesform'
        },
        {
            ref: 'payratesform',
            selector: 'payratesform',
            xtype: 'payratesform'
        },
        {
            ref: 'banks',
            selector: 'banks',
            xtype: 'banks'
        },
        {
            ref: 'jobtitles',
            selector: 'jobtitles',
            xtype: 'jobtitles'
        },
        {
            ref: 'jobgroups',
            selector: 'jobgroups',
            xtype: 'jobgroups'
        },
        {
            ref: 'emppayments',
            selector: 'emppayments',
            xtype: 'emppayments'
        },
        {
            ref: 'newpaymentsform',
            selector: 'newpaymentsform',
            xtype: 'newpaymentsform'
        },
        {
            ref: 'processpayroll',
            selector: 'processpayroll',
            xtype: 'processpayroll'
        },
        {
            ref: 'postpayroll',
            selector: 'postpayroll',
            xtype: 'postpayroll'
        },
        {
            ref: 'reportsmainview',
            selector: 'reportsmainview',
            xtype: 'reportsmainview'
        },
        {
            ref: 'payslipswin',
            selector: 'payslipswin',
            xtype: 'payslipswin'
        },
        {
            ref: 'bankpayments',
            selector: 'bankpayments',
            xtype: 'bankpayments'
        },
        {
            ref: 'nhifreturns',
            selector: 'nhifreturns',
            xtype: 'nhifreturns'
        },
        {
            ref: 'nssfreturns',
            selector: 'nssfreturns',
            xtype: 'nssfreturns'
        },
        {
            ref: 'payereturns',
            selector: 'payereturns',
            xtype: 'payereturns'
        },
        {
            ref: 'trialbalancewindow',
            selector: 'trialbalancewindow',
            xtype: 'trialbalancewindow'
        },
        {
            ref: 'payrollpostingwindow',
            selector: 'payrollpostingwindow'
        },
        {
            ref: 'payrollpostinggrid',
            selector: 'payrollpostinggrid',
            xtype: 'payrollpostinggrid'
        },
        {
            ref: 'payrolllistinggrid',
            selector: 'payrolllistinggrid',
            xtype: 'payrolllistinggrid'
        },
        {
            ref: 'payrollbranches',
            selector: 'payrollbranches',
            xtype: 'payrollbranches'
        },
        {
            ref: 'bankbranches',
            selector: 'bankbranches',
            xtype: 'bankbranches'
        },
        {
            ref: 'postbycode',
            selector: 'postbycode',
            xtype: 'postbycode'
        },
        {
            ref: 'payrollbatchupdate',
            selector: 'payrollbatchupdate',
            xtype: 'payrollbatchupdate'
        },
        {
            ref: 'saccoreport',
            selector: 'saccoreport',
            xtype: 'saccoreport'
        },
        {
            ref: 'welfaresavings',
            selector: 'welfaresavings',
            xtype: 'welfaresavings'
        },
        {
            ref: 'saccowelfare',
            selector: 'saccowelfare',
            xtype: 'saccowelfare'
        }
    ],

    getLoggedUser: function(component, eOpts) {
        var Params=Ext.urlDecode(window.location.search.substring(1));

        var User2=Ext.data.StoreManager.lookup('DefaultItemsStore');
        User2.load({
            params: {
                userName: Params.user
            },
            callback: function(records, operation, success) {
                 var data1=this.getStore('EmpPaymentStore').getAt(0);
                //myform.loadRecord(data1);
                console.log("Loaded user 1: " + records[0].data.FirstName);
                component.setValue("<b> You are Logged in as "+records[0].data.FirstName+"</b>");
                // alert('user2.get(FirstName)'+records[0].data.FirstName);

            },
            scope: this

        });
    },

    onDisplayfieldAfterRender: function(component, eOpts) {

        var Params=Ext.urlDecode(window.location.search.substring(1));

        var User2=Ext.data.StoreManager.lookup('DefaultItemsStore');
        User2.load({
          params: {
                userName: Params.user
            },
            callback: function(records, operation, success) {
                 var data1=this.getStore('EmpPaymentStore').getAt(0);
                //myform.loadRecord(data1);
                component.setValue("<b> "+records[0].data.CompanyName+"</b>");
                // alert('user2.get(FirstName)'+records[0].data.FirstName);

            },
            scope: this

        });
    },

    init: function(application) {
                this.control({
                    '#mnuEmpRegister':{
                        click:this.openEmpRegister
                    },
                    '#employeelistGrid':{
                        itemclick:this.loadEmployeePayments
                    },
                    '#mnuCompanySettings':{
                        click:this.openCompanySettings
                    },
                    '#mnuDepartments':{
                        click:this.openDepartments
                    },
                    '#mnuPayTypes':{
                        click:this.openPayTypes
                    },
                    '#mnuPayRates':{
                        click:this.openPayRates
                    },
                    '#mnuBanks':{
                        click:this.openBanks
                    },
                    '#mnuBankBranches':{
                        click:this.openBankBranches
                    },
                    '#mnuJobTitles':{
                        click:this.openJobTitles
                    },
                    '#mnuJobGroups':{
                        click:this.openJobGroups
                    },
                    '#mnuEmployeePayments':{
                        click:this.openEmployeePayments
                    },
                    '#mnuProcessPayroll':{
                        click:this.openProcessPayroll
                    },
                    '#mnuPostPayroll':{
                        click:this.openPostPayroll
                    },
                    '#mnuPayslips':{
                        click:this.openPayslipsWin
                    },
                    '#mnuBankPayments':{
                        click:this.openBankPaymentsWin
                    },
                    '#mnuBatchUpdate':{
                        click:this.openBatchUpdate
                    },
                    'employeeregister':{
                        itemdblclick:this.loadRegisterForm
                    },
                    'registerwindow button[id=cmdCloseRegister]': {
                        click: this.CloseRegister
                    },
                    '#cmdNewEmployee':{
                        click:this.openRegisterForm
                    },
                    '#cmdSaveEmployee':{
                        click:this.saveRegister
                    },
                    '#cmdClose':{
                        click:this.closeWindow
                    },
                    '#cmdPostByPid':{
                        click:this.openNewPaymentsForm
                    },
                    '#CatID':{
                        select:this.loadPaymentTypes
                    },
                    '#cmdSaveEmpPayment':{
                        click:this.saveEmpPayment
                    },
                    '#paytypesgrid':{
                        itemclick:this.loadPaytypeform
                    },
                    '#deptsGrid':{
                        itemclick:this.loadDeptsform
                    },
                    '#branchesGrid':{
                        itemclick:this.loadBranchesform
                    },
                    '#payRatesGrid':{
                        itemclick:this.loadRatesform
                    },
                    '#banksGrid':{
                        itemclick:this.loadBanksform
                    },
                    '#jobTitlesGrid':{
                        itemclick:this.loadTitlesForm
                    },
                    '#jobGroupsGrid':{
                        itemclick:this.loadJobGroupsForm
                    },
                    '#cmdImportPayments':{
                        click:this.importPayments
                    },
                    '#cmdUpdateTaxes':{
                        click:this.updateTaxes
                    },
                    '#empPayGridSummary':{
                        itemclick:this.loadPaymentDetails
                    },
                    '#empPostGridSummary':{
                        itemclick:this.loadPostPaymentDetails
                    },
                    '#cmdClearImports':{
                        click:this.clearImports
                    },
                    '#payMonth':{
                        select:this.getProcessedPaments
                    },
                    '#postMonth':{
                        select:this.getPostPayments
                    },
                    '#cmdPostPayroll':{
                        click:this.postPayroll
                    },
                    '#cmdPrintPayslip':{
                        click:this.printPayslip
                    },
                    '#cmdSlipPreview':{
                        click:this.openSlipPreview
                    },
                    '#cmdBankPayments':{
                        click:this.openBanksPaymentsPDf
                    },
                    '#mnuNhifReturns':{
                        click:this.openNhifReturns
                    },
                    '#mnuNssfReturns':{
                        click:this.openNssfReturns
                    },
                    '#mnuPayeReturns':{
                        click:this.openPayeReturns
                    },
                    '#mnuTrialBalance':{
                        click:this.openTrialBalanceWindow
                    },
                    '#cmdPreviewTrialBalance':{
                        click:this.previewTrialBalance
                    },
                    '#mnuOpenPostingWindow':{
                        click:this.openPostingWindow
                    },
                    '#mnuBranches':{
                        click:this.openDeptBranches
                    },
                    '#nhifMonth':{
                        select:this.loadNhifData
                    },
                    '#nssfMonth':{
                        select:this.loadNssfData
                    },
                    '#payeeMonth':{
                        select:this.loadPayeeData
                    },
                    '#cmdlogout':{
                        click:this.doLogout
                    },
                    '#mnuPayrollListing':{
                        click:this.getProllListing
                    },
                    '#mnuUsers1':{
                        click:this.getUsersList
                    },
                    '#cmdSave':{
                        click:this.saveCompanyDetails
                    },
                    '#bankBranchesGrid':{
                        itemclick:this.loadBankBranch
                    },
                    '#cmdNew':{
                        click:this.resetForms
                    },
                    '#cmdPrintTrialbalance':{
                        click:this.printTrialbalance
                    },
                    '#cmdSearchEmpPayments':{
                        click:this.searchEmpPayments
                    },
                    '#cmdPostByCode':{
                        click:this.openPostByCode
                    },
                    '#payTypesGrid':{
                        itemclick:this.getSelectedCode
                    },
                    '#cmbPaymentsTypes':{
                        select:this.doCalculations
                    },
                    '#empBatchpaytypes':{
                        itemclick:this.loadBatchPayments
                    },
                    '#mnuSaccoReports':{
                        click:this.openSaccoReports
                    },
                    '#mnuWelfareReports':{
                        click:this.openWelfareSaving
                    },
                    '#mnuCooperativeContributions':{
                        click:this.openCooperativeContributions
                    }
                });



        this.control({
            "#userName": {
                afterrender: this.getLoggedUser
            },
            "#CompanyName": {
                afterrender: this.onDisplayfieldAfterRender
            }
        });
    },

    loadRegisterForm: function(gridpanel, record, item, index, e, eOpts) {
        //alert("Test Register");
        var registerForm=Ext.create('PayrollApp.view.RegisterForm', {});
        var registerWindow=Ext.create('PayrollApp.view.RegisterWindow', {});

        //this.getForm().loadRecord(record);


        //Ext.getCmp('formStatus').setValue('update');
        registerForm.query('textfield[name="formStatus"]')[0].setValue('update');

        //dbRegisterForm.show();
        registerWindow.add(registerForm);
        registerWindow.show();
        registerForm.getForm().loadRecord(record);
    },

    CloseRegister: function(button) {
        var win = button.up('registerwindow');
        win.destroy();
    },

    openRegisterForm: function(button) {

        var registerForm=Ext.create('PayrollApp.view.RegisterForm', {});
        var registerWindow=Ext.create('PayrollApp.view.RegisterWindow', {});

        registerForm.query('textfield[name="formStatus"]')[0].setValue('insert');

        registerWindow.add(registerForm);
        registerWindow.show();

    },

    saveRegister: function(button) {
        //alert('test');
        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved New Employee successfully.');

                    var win = button.up('window');
                    win.removeAll();
                    win.close();

                    var empregisterStore=Ext.data.StoreManager.lookup('EmpRegisterStore');
                    empregisterStore.load({});


                },
                failure: function(form, action) {
                    if(action.result.errNo==1){
                        Ext.Msg.alert('Failed', 'Register with Pid '+action.result.errNo+' already exists');
                    }else{
                        Ext.Msg.alert('Failed', 'Could not save Register. Please ensure all the required fields are not empty');
                    }

                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors and continue');
        }

    },

    openCompanySettings: function() {

        companysettings = Ext.create('PayrollApp.view.CompanySettings', {});
        var companyWindow=Ext.create('Ext.window.Window', {
            title: 'Company Settings',
            resizable:false
        });

        companyWindow.add(companysettings);
        companyWindow.show();

        var companyinfostore=Ext.data.StoreManager.lookup('CompanyInfoStore');
        companyinfostore.load({});

        var data1=this.getStore('CompanyInfoStore').getAt(0);
        companysettings.getForm().loadRecord(data1);


    },

    openDepartments: function() {

        departments = Ext.create('PayrollApp.view.Departments', {});
        var departmentsWindow=Ext.create('Ext.window.Window', {
            title: 'Departments',
            resizable:false
        });

        departmentsWindow.add(departments);
        departmentsWindow.show();
    },

    openPayTypes: function() {

        paytypesform = Ext.create('PayrollApp.view.PayTypesForm', {});
        var paytypesWindow=Ext.create('Ext.window.Window', {
            title: 'Payment Types',
            resizable:false
        });

        paytypesWindow.add(paytypesform);
        paytypesWindow.show();
    },

    openPayRates: function() {

        payratesfrm = Ext.create('PayrollApp.view.PayRatesForm', {});
        var ratesWindow=Ext.create('Ext.window.Window', {
            title: 'Payment Rates',
            resizable:false
        });

        ratesWindow.add(payratesfrm);
        ratesWindow.show();
    },

    openBanks: function() {
        banksform= Ext.create('PayrollApp.view.Banks', {});
        var banksWindow=Ext.create('Ext.window.Window', {
            title: 'Payroll Banks'
        });

        banksWindow.add(banksform);
        banksWindow.show();
    },

    openJobTitles: function() {
        var jobtitles= Ext.create('PayrollApp.view.JobTitles', {});
        var titlesWindow=Ext.create('PayrollApp.view.RegisterWindow', {
            title: 'Job Titles'
        });

        titlesWindow.add(jobtitles);
        titlesWindow.show();

    },

    openJobGroups: function() {
        var jobgroups=Ext.create('PayrollApp.view.JobGroups', {});
        var groupsWindow=Ext.create('Ext.window.Window', {
            title: 'Job Groups'
        });

        groupsWindow.add(jobgroups);
        groupsWindow.show();

    },

    closeWindow: function(button) {
        var win = button.up('window');
        //win.removeAll();
        win.close();
    },

    openEmployeePayments: function() {

        employeepayments = Ext.create('PayrollApp.view.EmpPayments', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(employeepayments);
    },

    loadEmployeePayments: function(gridpanel, record, item, index, e, eOpts) {
        //alert(record.get('PID'));
        var empPayform=gridpanel.up('form');

        empPayform.getForm().loadRecord(record);

        var emppaymentstore=Ext.data.StoreManager.lookup('EmpPaymentStore');
        emppaymentstore.load({
            params: {
                pid: record.get('PID')
            },
            callback: function(records, operation, success) {
                // var data1=this.getStore('EmpPaymentStore').getAt(0);
                //myform.loadRecord(data1);

            },
            scope: this

        });
    },

    openNewPaymentsForm: function(button) {
        var pidField=button.up('form').getForm().findField('PID');
        var pid=pidField.getValue();

        newemppayments= Ext.create('PayrollApp.view.NewPaymentsForm', {});

        var paymentsWindow=Ext.create('Ext.window.Window', {
            title: 'Add a Payment or Deduction',
            resizable:false
        });

        this.getNewpaymentsform().down("#formStatus").setValue('insert');
        this.getNewpaymentsform().down("#pid").setValue(pid);

        paymentsWindow.add(newemppayments);
        paymentsWindow.show();
    },

    loadPaymentTypes: function() {
        var payType=this.getNewpaymentsform().down("#CatID").getValue();

        var payCatStore=Ext.data.StoreManager.lookup("PayTypeStore");

        payCatStore.load({
            params:{
                CatID:payType
            },
            callback: function(records, operation, success) {
                //var data1=this.getStore('DebtorDetails').getAt(0);
                // myform.loadRecord(data1);

            },
            scope: this
        });
    },

    saveEmpPayment: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var pidField=button.up('form').getForm().findField('pid');
        var pid=pidField.getValue();

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    var emppaymentstore=Ext.data.StoreManager.lookup('EmpPaymentStore');
                    emppaymentstore.load({
                        params: {
                            pid: pid
                        },
                        callback: function(records, operation, success) {
                             var data1=this.getStore('EmpPaymentStore').getAt(0);
                             myform.loadRecord(data1);

                        },
                        scope: this

                    });
                    var win = button.up('window');
                    win.close();

                },
                failure: function(form, action) {
                    if(action.result.errNo==1){
                        Ext.Msg.alert('Failed', 'Payment already exists in Employees record ,'+action.result.payName+' already exists');
                    }else{
                        Ext.Msg.alert('Failed', 'Could no add payment, please check your entries. Error='+action.result.payName);
                    }

                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadPaytypeform: function(gridpanel, record, item, index, e, options) {
        if (record) {
            var strForm= this.getPaytypesform().down('#paytypesfrm');
            strForm.getForm().loadRecord(record);

            strForm.getForm().findField('formStatus').setValue('update');

        }
    },

    loadDeptsform: function(gridpanel, record, item, index, e, options) {
        if (record) {
            this.getDepartmentsform().loadRecord(record);

            this.getDepartmentsform().getForm().findField('formStatus').setValue('update');
        }
    },

    loadRatesform: function(gridpanel, record, item, index, e, options) {
        if (record) {
            this.getPayratesform().loadRecord(record);

             this.getPayratesform().getForm().findField('formStatus').setValue('update');

        }
    },

    loadBanksform: function(gridpanel, record, item, index, e, options) {
        if (record) {
            this.getBanks().loadRecord(record);

             this.getBanks().getForm().findField('formStatus').setValue('update');

        }
    },

    loadTitlesForm: function(gridpanel, record, item, index, e, options) {
        if (record) {
            this.getJobtitles().loadRecord(record);

             this.getJobtitles().getForm().findField('formStatus').setValue('update');
        }
    },

    loadJobGroupsForm: function(gridpanel, record, item, index, e, options) {
        //alert('test');
        if (record) {
            this.getJobgroups().loadRecord(record);

             this.getJobgroups().getForm().findField('formStatus').setValue('update');
        }
    },

    openProcessPayroll: function() {

        processpayroll = Ext.create('PayrollApp.view.ProcessPayroll', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(processpayroll);

        //var paySummary=Ext.data.StoreManager.lookup('PaymentsSummaryStore');
        //paySummary.load({});
    },

    importPayments: function(button) {
        var grid=button.up('grid');

        payMonth=this.getProcesspayroll().down("#payMonth").getValue();

        if(payMonth===null){
            Ext.Msg.alert('Missing Payment','Please Select the Payroll Month');
        }else{


            Ext.Msg.show({
                title:'Import Payments?',
                msg: 'Are you sure you want to IMPORT PAYMENTS',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                fn: function(rec) {
                    if (rec === "yes") {
                        Ext.Ajax.request({
                            url: 'data/getDataFunctions.php?task=importPayments',
                            params: {
                                payMonth:payMonth
                            },
                            waitMsg: 'Importing Posted Payments...',
                            success: function(response){
                                var text = response.responseText;
                                Ext.Msg.alert('Data Import Status','Payment Data imported Successfully');
                                var paySummary=Ext.data.StoreManager.lookup('PaymentsSummaryStore');
                                paySummary.load({
                                    params:{
                                        payMonth:payMonth
                                    },
                                    callback: function(records, operation, success) {

                                    },
                                    scope: this
                                });

                            },
                            failure:function(response){
                                var resp = JSON.parseJSON(response);
                                Ext.Msg.alert(resp.error);
                            }
                        });

                    }
                }
            });
        }

    },

    loadPaymentDetails: function(gridpanel, record, item, index, e, eOpts) {
        payMonth=this.getProcesspayroll().down("#payMonth").getValue();

        var prollpaymentsstore=Ext.data.StoreManager.lookup('ProllPaymentsStore');
        prollpaymentsstore.load({
            params: {
                pid: record.get('PID'),
                payMonth:payMonth

            },
            callback: function(records, operation, success) {


            },
            scope: this
        });

        var emplist=Ext.data.StoreManager.lookup('EmployeeListStore');
        emplist.load({
            params: {
                pid: record.get('PID')
            },
            callback: function(records, operation, success) {
                var data1=this.getStore('EmployeeListStore').getAt(0);
                //myform.loadRecord(data1);
                var empPayform=gridpanel.up('form');
                empPayform.getForm().loadRecord(data1);

            },
            scope: this
        });
    },

    updateTaxes: function(button) {
        var grid=button.up('grid');

        payMonth=this.getProcesspayroll().down("#payMonth").getValue();

        if(payMonth===null){
            Ext.Msg.alert('Missing Payment','Please Select the Payroll Month');
        }else{

            Ext.Msg.show({
                title:'Process Payments?',
                msg: 'Are you sure you want to Process Payroll',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                fn: function(rec) {
                    if (rec === "yes") {
                        Ext.Ajax.request({
                            url: 'data/getDataFunctions.php?task=updateTaxes',
                            params: {
                                payMonth:payMonth
                            },
                            waitMsg: 'Processing Payroll ...',
                            success: function(response){
                                var text = response.responseText;
                                Ext.Msg.alert('Process Status','Payroll Successfully Processed');
                                 var paySummary=Ext.data.StoreManager.lookup('PaymentsSummaryStore');
                                paySummary.load({
                                    params:{
                                        payMonth:payMonth
                                    },
                                    callback: function(records, operation, success) {

                                    },
                                    scope: this
                                });
                            },
                            failure:function(response){
                                var resp = JSON.parseJSON(response);
                                Ext.Msg.alert(resp.error);
                            }
                        });

                    }
                }
            });
        }
    },

    clearImports: function(button) {
        var grid=button.up('grid');

        payMonth=this.getProcesspayroll().down("#payMonth").getValue();
        prollStatus=this.getProcesspayroll().down("#prollStatus").getValue();

        if(payMonth===null){
            Ext.Msg.alert('Payment Month','Please select the Payment Month');
        }else if(prollStatus==="POSTED"){
            Ext.Msg.alert('Payroll Closed','The Payroll you are trying to clear is already Closed,\nPlease Select an Open Month/Payroll');
        }else{

            Ext.Msg.show({
                title:'Clear Imported Payments?',
                msg: 'Are you sure you want to Clear Imported Data',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                fn: function(rec) {
                    if (rec === "yes") {
                        Ext.Ajax.request({
                            url: 'data/getDataFunctions.php?task=clearImports',
                            params: {
                                payMonth:payMonth
                            },
                            success: function(response,opt){
                                var text = response.responseText;
                                Ext.Msg.alert('Clear Data Status','Successfully Cleared Imports');
                                var paySummary=Ext.data.StoreManager.lookup('PaymentsSummaryStore');
                                paySummary.load({});

                            },
                            failure:function(response,opt){
                                var resp = JSON.parseJSON(response);
                                Ext.Msg.alert(resp.errorNo);
                            }
                        });

                    }
                }
            });
        }
    },

    openPostPayroll: function() {
        postPayroll = Ext.create('PayrollApp.view.PostPayroll', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(postPayroll);

        //var paySummary=Ext.data.StoreManager.lookup('PaymentsSummaryStore');
        //paySummary.load({});
    },

    getProcessedPaments: function() {
        var payMonth=this.getProcesspayroll().down("#payMonth").getValue();
        var pStatus=0;

        var paymentsSummary=Ext.data.StoreManager.lookup("PaymentsSummaryStore");
        var prollStatusStore=Ext.data.StoreManager.lookup("PayrollStatusStore");

        prollStatusStore.load({
            params:{
                payMonth:payMonth
            },
            callback: function(records, operation, success) {
                 pStatus = records[0].data.prollStatus;
                 if(pStatus==="POSTED"){
                     this.getProcesspayroll().down("#prollStatus").setValue(pStatus);
                     this.getProcesspayroll().down("#PayrollStatus").setValue("Payroll for the month of "+payMonth+" is Already Closed");
                 }else{
                     this.getProcesspayroll().down("#prollStatus").reset();
                     this.getProcesspayroll().down("#PayrollStatus").reset();

                 }

            },
            scope: this
        });

        paymentsSummary.load({
            params:{
                payMonth:payMonth
            },
            callback: function(records, operation, success) {



            },
            scope: this
        });

    },

    getPostPayments: function() {
        var payMonth=this.getPostpayroll().down("#postMonth").getValue();

        var paymentsSummary=Ext.data.StoreManager.lookup("PaymentsSummaryStore");

        paymentsSummary.load({
            params:{
                payMonth:payMonth
            },
            callback: function(records, operation, success) {
                //var data1=this.getStore('DebtorDetails').getAt(0);
                // myform.loadRecord(data1);
                pstatus=records[0].get('pstatus');

                if(pstatus==="POSTED"){
                    this.getPostpayroll().down('#payrollStatus').setValue('Payroll Already POSTED');
                    this.getPostpayroll().down('#cmdPostPayroll').hide();
                }else{
                    this.getPostpayroll().down('#payrollStatus').setValue('');
                    this.getPostpayroll().down('#cmdPostPayroll').show();
                }
            },
            scope: this
        });
    },

    postPayroll: function(button) {
        payMonth=this.getPostpayroll().down("#postMonth").getValue();

        if(payMonth===null){
            Ext.Msg.alert('test','Paymonth cannot be null');
        }else{
            Ext.Msg.show({
                title:'POST PAYROLL?',
                msg: 'Are you sure you want to POST PAYROLL, this process is irriversible',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                fn: function(rec) {
                    if (rec === "yes") {
                        Ext.Ajax.request({
                            url: 'data/getDataFunctions.php?task=postPayroll',
                            params: {
                                payMonth:payMonth
                            },
                            success: function(response){
                                var text = response.responseText;
                                Ext.Msg.alert('Tax Update Status','Successfully Posted Payroll');
                                 var paySummary=Ext.data.StoreManager.lookup('PaymentsSummaryStore');
                                paySummary.load({
                                    params:{
                                        payMonth:payMonth
                                    },
                                    callback: function(records, operation, success) {

                                    },
                                    scope: this
                                });

                            },
                            failure:function(response){
                                var resp = JSON.parseJSON(response);
                                Ext.Msg.alert(resp.error);
                            }
                        });

                    }
                }
            });
        }

    },

    loadPostPaymentDetails: function(gridpanel, record, item, index, e, eOpts) {
        payMonth=this.getPostpayroll().down("#postMonth").getValue();

        var prollpaymentsstore=Ext.data.StoreManager.lookup('ProllPaymentsStore');
        prollpaymentsstore.load({
            params: {
                pid: record.get('PID'),
                payMonth:payMonth

            },
            callback: function(records, operation, success) {


            },
            scope: this
        });

    },

    openPayslipsWin: function() {

        payslipswin = Ext.create('PayrollApp.view.PayslipsWin', {});
        var slipsWindow=Ext.create('Ext.window.Window', {
            title: 'Payslips Options',
            resizable:false
        });

        slipsWindow.add(payslipswin);
        slipsWindow.show();
    },

    openSlipPreview: function(button) {
        //Ext.Msg.alert(this.getPayslipswin().down("#payslipMonth").getValue());

        reportswindow = Ext.create('PayrollApp.view.ReportsMainView', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();
        //reportswindow = Ext.create('PayrollApp.view.ReportsMainView', {});


        var staffStore=Ext.data.StoreManager.lookup("SlipEmpInfoStore");
        staffStore.load({
            params: {
                pid:this.getPayslipswin().down('#pid1').getValue(),
                pid2:this.getPayslipswin().down('#pid2').getValue(),
                payMonth:this.getPayslipswin().down('#payslipMonth').getValue(),
                empBranch:this.getPayslipswin().down('#empBranch').getValue(),
                department:this.getPayslipswin().down('#department').getValue()
            },
            callback: function(records, operation, success) {


            },
            scope: this
        });

        center_container.add(reportswindow);

        var data1=staffStore.proxy.reader.rawData;

        var tpl=new Ext.XTemplate(
        '<Table id=prollTable>',
        '{[ position=1 ]}',
        '<tpl for="StaffList">',
        '{[ (position===1) ? "<tr>" : "" ]}',
        '<td valign=top class=mainTD>',
        '<b>PID:{pid}</b><br>',
        '<b>Company:{CompanyName}</b><br>',
        'Name:{empNames}<br>',
        'Period:{period}<br>',
        'Branch:{empBranch}<br>',
        'Department:{department}<br>',
        'PinNo:{Pin_NO}<br><br>',
        '<table id=payslips><tr class=txtheading><td>',
        '<b>EARNINGS:</b></td><td align=right><b>AMOUNTS</b></td><td align=right><b>BAL</b></td></tr>',
        '<tpl for="Earnings">',
        '<tr><td>{PayType}</td><td align=right>{Amount}</td><td align=right>{Balance}</td></tr>',
        '</tpl>',
        '<tr><td>GROSS PAY</td><td align=right><b>{GrossPay}</b></td><td align=right></td></tr>',
        '<tr><td colspan=3>&nbsp;</td></tr>',

        '<tr class=txtheading><td><b>TAX DETAILS:</b></td><td align=right></td><td align=right></td></tr>',
        '<tpl for="TaxDeductions">',
        '<tr><td>{PayType}</td><td align=right>{Amount}</td><td align=right>{Balance}</td></tr>',
        '</tpl>',

        '<tpl if="InsuranceRelief &gt; 0">' ,
        '<tr><td>Insurance Relief</td><td align=right>{InsuranceRelief}</td><td align=right></td></tr>',
        '</tpl>',

        '<tr><td>Tax Deducted</td><td align=right><b>{TaxDeducted}</b></td><td align=right></td></tr>',

        '<tr><td colspan=3>&nbsp;</td></tr>',

        '<tr class=txtheading><td><b>DEDUCTIONS:</b></td><td align=right></td><td align=right></td></tr>',

        '<tpl for="Deductions">',
        '<tr><td>{PayType}</td><td align=right>{Amount}</td><td align=right>{Balance}</td></tr>',
        '</tpl>',
        '<tr><td colspan=3>&nbsp;</td></tr>',

        '<tr class=txtheading><td><b>INFORMATION-:</b></td><td align=right></td><td align=right></td></tr>',
            '<tpl for="Information">',
            '<tr><td>{PayType}</td><td align=right>{Amount}</td><td align=right>{Balance}</td></tr>',
            '</tpl>',
        '<tr><td>NSSF Company</td><td align=right>{NssfCompany}</td><td align=right>{Balance}</td></tr>',

        '<tr class=txtheading><td><b>SUMMARY-:</b></td><td align=right></td><td align=right></td></tr>',
        '<tr><td>LESS DEDUCTIONS</td><td align=right>{TotalDeduction}</td><td align=right></td></tr>',
        '<tr><td><b>NET PAY</b></td><td align=right><b>{NetPay}</b></td><td align=right></td></tr>',

        '<tr><td colspan=3>&nbsp;</td></tr>',
        '<tr><td colspan=3>&nbsp;</td></tr>',



        '</table>',
        '<br><br><br>',
        '</td>',
        '{[ (position===4) ? (position=1) : (position++) ]}',
        '</tpl>',
        '</table>'
        );

        tpl.overwrite(reportswindow.body,data1);

    },

    /* Print Payslips to PDF File */
    printPayslip: function(button) {
        var slipMnth=this.getPayslipswin().down('#payslipMonth').getValue();
        var pNo=this.getPayslipswin().down('#pid1').getValue();
        var pNo2=this.getPayslipswin().down('#pid2').getValue();
        var slipsNo='2';//this.getPayslipswin().down('textfield[name=pages]').getValue();
        var payDept=this.getPayslipswin().down('#department').getValue();
        var branch=this.getPayslipswin().down('#empBranch').getValue();


        var strparam='';

        if(payDept){
            //Ext.Msg.alert('Select','Selected to displaye pages '+payDept);
            strparam+='&paydept='+payDept;
        }

        if(branch==='CCC'){
            //Ext.Msg.alert('Select','Selected to displaye pages '+branch);
            strparam+='&branch='+branch;
            window.open('reports/payslips.php?slipMnth='+slipMnth+'&pid='+pNo+'&pid2='+pNo2+'&slipsNo='+slipsNo+strparam ,"Reports",
                        "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            window.open('reports/payslipsMain.php?slipMnth='+slipMnth+'&pid='+pNo+'&pid2='+pNo2+'&slipsNo='+slipsNo+strparam ,"Reports",
                        "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }


    },

    openBankPaymentsWin: function() {

        bankpayments= Ext.create('PayrollApp.view.BankPayments', {});
        var bpaymentsWin=Ext.create('Ext.window.Window', {
            title: 'Bank Payments Schedule',
            resizable:false
        });

        bpaymentsWin.add(bankpayments);
        bpaymentsWin.show();
    },

    openBanksPaymentsPDf: function(button) {
        var payMonth=this.getBankpayments().down('#payMonth').getValue();
        var bankcode=this.getBankpayments().down('#bankcode').getValue();
        var branch=this.getBankpayments().down('#branch').getValue();


        var strparam='';

        if(!payMonth){
            Ext.Msg.alert('Missing Month','Please select the Payment Month ');
            //strparam+='&paydept='+payDept;
        }else if(!bankcode){
            Ext.Msg.alert('Missing Bank','Please select the Bank Branch ');
            //strparam+='&paydept='+payDept;
        }else if(!branch){
            //Ext.Msg.alert('Missing Branch','Please select the Bank Branch ');
            // strparam+='&branch='+branch;
            window.open('reports/prollBanklistNaz.php?payMonth='+payMonth+'&bankcode='+bankcode,"Reports",
            "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            window.open('reports/prollBanklistpdf.php?payMonth='+payMonth+'&bankcode='+bankcode+'&branchID='+branch,"Reports",
            "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
        }
    },

    openNhifReturns: function() {
        nhifreturns= Ext.create('PayrollApp.view.NhifReturns', {});
        var nhifWindow=Ext.create('Ext.window.Window', {
            title: 'NHIF Returns',
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        var nhifReturns=Ext.data.StoreManager.lookup("NhifReturnsStore");

        nhifReturns.load({});

        nhifWindow.add(nhifreturns);
        nhifWindow.show();
    },

    openNssfReturns: function() {
        nssfreturns= Ext.create('PayrollApp.view.NssfReturns', {});
        var nssfWindow=Ext.create('Ext.window.Window', {
            title: 'NSSF Returns',
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });


        var nssfStore=Ext.data.StoreManager.lookup("NssfReturnsStore");

        nssfStore.load({});

        nssfWindow.add(nssfreturns);
        nssfWindow.show();
    },

    openPayeReturns: function() {
        payereturns= Ext.create('PayrollApp.view.PayeReturns', {});
        var payeWindow=Ext.create('Ext.window.Window', {
            title: 'PAYE Returns',
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });


        var payeeStore=Ext.data.StoreManager.lookup("PayeReturnsStore");

        payeeStore.load({});

        payeWindow.add(payereturns);
        payeWindow.show();
    },

    previewTrialBalance: function(button) {

        //Ext.Msg.alert(this.getPayslipswin().down("#payslipMonth").getValue());

        reportswindow = Ext.create('PayrollApp.view.ReportsMainView', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        var pmonth=this.getTrialbalancewindow().down('#tpayMonth').getValue();
        var branch=this.getTrialbalancewindow().down('#empBranch').getValue();

        var trialStore=Ext.data.StoreManager.lookup("TrialBalanceStore");

        trialStore.load({
            params: {
                payMonth:pmonth,
                empBranch:branch
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });

        var creditSum=0;
        var debitSum=0;
        trialStore.each(function (rec) {
            creditSum += rec.get('Credit');
            debitSum +=rec.get('Debit');
        });

        console.info(debitSum);

        center_container.add(reportswindow);

        var company;
        var Params=Ext.urlDecode(window.location.search.substring(1));

        var User2=Ext.data.StoreManager.lookup('DefaultItemsStore');
        User2.load({
          params: {
                userName: Params.user
            },
            callback: function(records, operation, success) {
               //company="records[1].data.CompanyName";
            },
            scope: this

        });


        User2.each(function (rec) {
           company = rec.get('CompanyName');
            //debitSum +=rec.get('Debit');
        });


        //var company=company;


        var data1=trialStore.proxy.reader.rawData;


        var d = new Date();
        var n = d.getFullYear();
        var period=pmonth +" "+ n;

        var tpl=new Ext.XTemplate(
        '<Table id=trialBalance>',
        '<tr><td colspan=4 class=titles>{[this.getCompanyName() ]}</td></tr>',
        '<tr><td colspan=4 class=titles>FINAL POSTINGS SUMMARY</td></tr>',
        '<tr><td colspan=4 class=titles>Branch : {[this.getBranch() ]}</td></tr>',
        '<tr><td colspan=4 class=titles>For the Period : {[this.getPeriod() ]}</td></tr>',
        '<tr><th>Pay Code</th><th>Pay Type</th><th>Debit</th><th>Credit</th></tr>',
        '<tpl for="trialbalance">',
        '<tr>',
        '<td>{PayCode}</td>',
        '<td>{Pay_Type}</td>',
        '<td>{Debit}</td>',
        '<td>{Credit}</td>',
        '</tpl>',
        '<tr><td colspan=2 class=totals>Totals</td><td class=totals> {[this.getDebitTotal() ]}</td><td class=totals> {[ this.getCreditTotal() ]}</td></tr>',
        '</table>',
        {
            getCompanyName:function(){
                return company;
            },
            getBranch:function(){
                return branch;
            },
            getPeriod:function(){
                return period;
            },
            getDebitTotal:function(){
                return debitSum.toFixed(2);
            },
            getCreditTotal:function(){
                return creditSum.toFixed(2);
            }
        }
        );

        tpl.overwrite(reportswindow.body,data1);

    },

    openTrialBalanceWindow: function() {
        trialbalance= Ext.create('PayrollApp.view.TrialBalanceWindow', {});
        var trialWin=Ext.create('Ext.window.Window', {
            title: 'Payroll Trial balance',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        trialWin.add(trialbalance);
        trialWin.show();
    },

    openPostingWindow: function() {
        //Ext.Msg.alert('Test Test');
        payrollposting= Ext.create('PayrollApp.view.PayrollPostingWindow', {});
        var postingwindow=Ext.create('Ext.window.Window', {
            title: 'Payroll Posting',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        postingwindow.add(payrollposting);
        postingwindow.show();
    },

    openPayrollPostings: function(button) {
        //alert('test');

        postingGrid = Ext.create('PayrollApp.view.PayrollPostingGrid', {});
        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(postingGrid);

        var postingStore=Ext.data.StoreManager.lookup("PayrollPostingStore");

        postingStore.load({
            params: {
                payMonth:this.getPayrollpostingwindow().down('#payMonth').getValue(),
                empBranch:this.getPayrollpostingwindow().down('#empBranch').getValue(),
                CatID:this.getPayrollpostingwindow().down('#CatID').getValue(),
                PayType:this.getPayrollpostingwindow().down('#PaymentType').getValue(),
                pid:this.getPayrollpostingwindow().down('#pid1').getValue(),
                pid2:this.getPayrollpostingwindow().down('#pid2').getValue()
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });

    },

    loadNssfData: function() {
        var nssfStore=Ext.data.StoreManager.lookup("NssfReturnsStore");

        nssfStore.load({
            params: {
                payMonth:this.getNssfreturns().down('#nssfMonth').getValue()
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });

    },

    loadNhifData: function() {
        var nhifStore=Ext.data.StoreManager.lookup("NhifReturnsStore");

        nhifStore.load({
            params: {
                payMonth:this.getNhifreturns().down('#nhifMonth').getValue()
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });

    },

    loadPayeeData: function() {
        var payeeStore=Ext.data.StoreManager.lookup("PayeReturnsStore");

        payeeStore.load({
            params: {
                payMonth:this.getPayereturns().down('#payeeMonth').getValue()
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });

    },

    getProllListing: function() {
        listing= Ext.create('PayrollApp.view.PayrollListingWindow', {});
        var listingWin=Ext.create('Ext.window.Window', {
            title: 'Payroll Listing',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        listingWin.add(listing);
        listingWin.show();


    },

    saveCompanyDetails: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        //var pidField=button.up('form').getForm().findField('pid');
        //var pid=pidField.getValue();

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    var companyInfo=Ext.data.StoreManager.lookup('CompanyInfoStore');
                    companyInfo.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating company please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openDeptBranches: function() {

        branches = Ext.create('PayrollApp.view.PayrollBranches', {});
        var branchesWindow=Ext.create('Ext.window.Window', {
            title: 'Payroll Branches',
            resizable:false
        });

        branchesWindow.add(branches);
        branchesWindow.show();
    },

    loadBranchesform: function(gridpanel, record, item, index, e, eOpts) {
        if (record) {
            this.getPayrollbranches().loadRecord(record);

            this.getPayrollbranches().getForm().findField('formStatus').setValue('update');
        }
    },

    openBankBranches: function() {

        bankBranches = Ext.create('PayrollApp.view.BankBranches', {});
        var bankBranchesWindow=Ext.create('Ext.window.Window', {
            title: 'Bank Branches',
            resizable:false
        });

        bankBranchesWindow.add(bankBranches);
        bankBranchesWindow.show();
    },

    loadBankBranch: function(gridpanel, record, item, index, e, eOpts) {
        if (record) {
            this.getBankbranches().loadRecord(record);
        }
    },

    resetForms: function(button) {
        var currform=button.up('form').getForm();
        currform.reset();

        button.up('form').getForm().findField('formStatus').setValue('insert');
    },

    getUsersList: function() {

        userslist = Ext.create('PayrollApp.view.UserManagement', {});
        var usersWindow=Ext.create('Ext.window.Window', {
            title: 'User Management',
            resizable:false
        });

        usersWindow.add(userslist);
        usersWindow.show();
    },

    doLogout: function(button, e, eOpts) {
        var Params=Ext.urlDecode(window.location.search.substring(1));
        Ext.Ajax.request(
        {
            // waitMsg: 'Saving changes...',
            url:'data/getDataFunctions.php?task=doLogout',
            params: {
               user:Params.user
            },
            success:function(response,options){

                document.location.href='index.php';

            },
            failure:function(response,options){
                Ext.MessageBox.alert('Warning','Invalid login Info, Check the username and password...');
                //ds.rejectChanges();//undo any changes
            }
        });
    },

    printTrialbalance: function(button) {
        var pmonth=this.getTrialbalancewindow().down('#tpayMonth').getValue();
        var branch=this.getTrialbalancewindow().down('#empBranch').getValue();


        window.open('reports/trialBalance.php?payMonth='+pmonth+'&branch='+branch ,"Reports",
        "menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes");
    },

    searchEmpPayments: function(button) {
        searchparam=this.getEmppayments().down("#txtSearch").getValue();

        //Ext.Msg.alert('test','test test '+searchparam);

        var employeeListStore=Ext.data.StoreManager.lookup('EmployeeListStore');
        employeeListStore.load({
            params: {
                searchParam: searchparam

            },
            callback: function(records, operation, success) {


            },
            scope: this
        });

    },

    openPostByCode: function(button) {

        postByCode = Ext.create('PayrollApp.view.PostByCode', {});
        var postByCodeWindow=Ext.create('Ext.window.Window', {
            title: 'Post By Code',
            resizable:false
        });

        postByCodeWindow.add(postByCode);
        postByCodeWindow.show();

        // var companyinfostore=Ext.data.StoreManager.lookup('CompanyInfoStore');
        // companyinfostore.load({});

        // var data1=this.getStore('CompanyInfoStore').getAt(0);
        // companysettings.getForm().loadRecord(data1);


    },

    getSelectedCode: function(gridpanel, record, item, index, e, eOpts) {
        this.getPostbycode().down('#payTitle').setValue(record.get('PayType'));
        this.getPostbycode().down('#txtPayTypeID').setValue(record.get('ID'));
        this.getPostbycode().down('#txtPayCatId').setValue(record.get('CatID'));
    },

    doCalculations: function(combo,records,eOpts) {
        var payType=this.getNewpaymentsform().down("#cmbPaymentsTypes").getValue();
        var pid=this.getNewpaymentsform().down('#pid').getValue();

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=doCalculations',
            params: {
                PaymentType:payType,
                pid:pid
            },
            waitMsg: 'Calculating '+payType+' ......',
            success: function(response){
                var counter;
                var text = response.responseText;
                var jsonData = JSON.parse(text);
                for (var i = 0; i < jsonData.Results.length; i++) {
                    counter = jsonData.Results[i];
                }

                console.log(counter.calculated);
                amount=counter.calculated;
                //this.updateAmount(counter.calculated);
                this.getNewpaymentsform().down("#txtAmount").setValue(amount);


            },
            failure:function(response){
                var resp = JSON.parse(response);
                Ext.Msg.alert(resp.error);
            },
            scope:this
        });

    },

    openEmpRegister: function(gridpanel, record, item, index, e, eOpts) {
        var empliststore=Ext.data.StoreManager.lookup("EmployeeListStore");
        empliststore.load({});

        registerGrid=Ext.create('PayrollApp.view.EmployeeRegister',{});
        center_container=this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(registerGrid);


    },

    openBatchUpdate: function() {
        //var paytypeliststore=Ext.data.StoreManager.lookup("EmployeeListStore");
        //empliststore.load({});

        console.log('test Batch update');

        var batchUpdateForm=Ext.create('PayrollApp.view.PayrollBatchUpdate',{});
        var center_container=this.getViewport().down('container[region=center]');
        center_container.removeAll();

        center_container.add(batchUpdateForm);
    },

    loadBatchPayments: function(gridpanel, record, item, index, e, eOpts) {
        var empBatchPaymentsStore=Ext.data.StoreManager.lookup("EmployeesBatchListStore");
        gridpanel.up('form').getForm().findField('selectedPayType').setValue(record.get('PayType'));
        gridpanel.up('form').getForm().findField('txtSelectedPaytype').setValue(record.get('ID'));


        empBatchPaymentsStore.load({
            params:{
                PaymentType:record.get('ID')
            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    },

    openSaccoReports: function() {

        saccoReports= Ext.create('PayrollApp.view.SaccoReport', {});

        //Ext.Msg.alert('test','Test');

        center_container = this.getViewport().down('container[region=center]');
        center_container.removeAll();


        var saccoStore=Ext.data.StoreManager.lookup("SaccoContributionStore");

        saccoStore.load({});

        center_container.add(saccoReports);
    },

    openWelfareSaving: function() {
                welfareReports= Ext.create('PayrollApp.view.WelfareSavings', {});

                 center_container = this.getViewport().down('container[region=center]');
                center_container.removeAll();

                var welfareStore=Ext.data.StoreManager.lookup("WelfareStore");

                welfareStore.load({});

                center_container.add(welfareReports);


    },

    openCooperativeContributions: function() {
        cooperatives= Ext.create('PayrollApp.view.SaccoWelfare', {});
        var coopsWin=Ext.create('Ext.window.Window', {
            title: 'Sacco And Welfare Contributions',
            resizable:false,
            animCollapse: true,
            collapsible: true,
            tools: [
            {
                xtype: 'tool',
                type: 'minimize'
            },
            {
                xtype: 'tool',
                type: 'maximize'
            }
            ]
        });

        coopsWin.add(cooperatives);
        coopsWin.show();
    }

});
